use openssl::ssl::{SslAcceptor, SslMethod};
use std::io::{Read, Write, Result};

#[derive(Debug)]
pub struct DynSocket<'a> {
    raw: Vec<&'a [u8]>,
    index: usize,
}

impl<'a> Read for DynSocket<'a> {
    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
        println!("<<<==================== {:?}", self.index);
        if self.index == self.raw.len() {
            return Ok(0)
        }
        
        let size = self.raw[self.index].len();
        for index in 0..size {
            buf[index] = self.raw[self.index][index];
        }
        
        self.index += 1;
        Ok(size)
    }
}

impl<'a> Write for DynSocket<'a> {
    fn write(&mut self, buf: &[u8]) -> Result<usize> {
        println!("{:?}", buf);
        Ok(buf.len())
    }
    
    fn flush(&mut self) -> Result<()> {
        println!("==============================>>>");
        Ok(())
    }
}

const HELLO: [u8; 159] = [
    0x16, 0xfe, 0xff, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x92, 0x01, 0x00,
    0x00, 0x86, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x86,
    0xfe, 0xfd, 0x09, 0xdc, 0xf4,
    0x8a, 0x65, 0xa2, 0x37, 0xb2,
    0x16, 0x3f, 0x7b, 0xf3, 0x91,
    0xe0, 0x63, 0x85, 0xb0, 0x97,
    0x2a, 0x13, 0xe0, 0x3f, 0x17,
    0xce, 0x13, 0xa0, 0x62, 0x98,
    0x00, 0x2e, 0x46, 0x31, 0x00,
    0x00, 0x00, 0x18, 0xc0, 0x2b,
    0xc0, 0x2f, 0xcc, 0xa9, 0xcc,
    0xa8, 0xc0, 0x09, 0xc0, 0x13,
    0xc0, 0x0a, 0xc0, 0x14, 0x00,
    0x9c, 0x00, 0x2f, 0x00, 0x35,
    0x00, 0x0a, 0x01, 0x00, 0x00,
    0x44, 0x00, 0x17, 0x00, 0x00,
    0xff, 0x01, 0x00, 0x01, 0x00,
    0x00, 0x0a, 0x00, 0x08, 0x00,
    0x06, 0x00, 0x1d, 0x00, 0x17,
    0x00, 0x18, 0x00, 0x0b, 0x00,
    0x02, 0x01, 0x00, 0x00, 0x23,
    0x00, 0x00, 0x00, 0x0d, 0x00,
    0x14, 0x00, 0x12, 0x04, 0x03,
    0x08, 0x04, 0x04, 0x01, 0x05,
    0x03, 0x08, 0x05, 0x05, 0x01,
    0x08, 0x06, 0x06, 0x01, 0x02,
    0x01, 0x00, 0x0e, 0x00, 0x09,
    0x00, 0x06, 0x00, 0x01, 0x00,
    0x08, 0x00, 0x07, 0x00
];

const SERVER_HELLO: [u8; 544] = [
    0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x01, 0x2b, 0x0b, 0x00, 0x01, 0x1f, 0x00, 0x01, 0x00, 
    0x00, 0x00, 0x00, 0x01, 0x1f, 0x00, 0x01, 0x1c, 0x00, 0x01, 
    0x19, 0x30, 0x82, 0x01, 0x15, 0x30, 0x81, 0xbd, 0xa0, 0x03, 
    0x02, 0x01, 0x02, 0x02, 0x09, 0x00, 0xd1, 0x7a, 0xfe, 0x7d, 
    0x3e, 0x76, 0x07, 0xfe, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 
    0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x11, 0x31, 0x0f, 
    0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06, 0x57, 
    0x65, 0x62, 0x52, 0x54, 0x43, 0x30, 0x1e, 0x17, 0x0d, 0x32, 
    0x31, 0x30, 0x32, 0x31, 0x36, 0x31, 0x32, 0x35, 0x37, 0x30, 
    0x33, 0x5a, 0x17, 0x0d, 0x32, 0x31, 0x30, 0x33, 0x31, 0x39, 
    0x31, 0x32, 0x35, 0x37, 0x30, 0x33, 0x5a, 0x30, 0x11, 0x31, 
    0x0f, 0x30, 0x0d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x06, 
    0x57, 0x65, 0x62, 0x52, 0x54, 0x43, 0x30, 0x59, 0x30, 0x13, 
    0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03, 
    0x42, 0x00, 0x04, 0x29, 0xee, 0xa6, 0x66, 0x00, 0x55, 0x29, 
    0x2d, 0x1a, 0x7d, 0x6b, 0x0e, 0x4c, 0x44, 0x25, 0x29, 0x00, 
    0x9e, 0xbb, 0xf6, 0xa5, 0x81, 0xe6, 0x36, 0x09, 0x92, 0x67, 
    0xd3, 0x70, 0xc1, 0xc0, 0xed, 0xa6, 0x70, 0x64, 0xd5, 0xa0, 
    0x54, 0xaa, 0xf2, 0xcf, 0x4a, 0x96, 0xd1, 0xd4, 0x11, 0x39, 
    0x1c, 0xbe, 0xec, 0x22, 0xb6, 0x6f, 0x16, 0x97, 0x21, 0xf3, 
    0x64, 0x1e, 0xf2, 0x2b, 0x90, 0x91, 0xff, 0x30, 0x0a, 0x06, 
    0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x03, 
    0x47, 0x00, 0x30, 0x44, 0x02, 0x20, 0x7b, 0x0f, 0x49, 0xfc, 
    0xd5, 0xfe, 0xd1, 0xde, 0xb7, 0x4e, 0xc5, 0xb2, 0x00, 0x85, 
    0x7b, 0xed, 0x26, 0xab, 0xf1, 0x61, 0x45, 0xb5, 0x42, 0xfb, 
    0xf6, 0x76, 0x93, 0xe1, 0x4c, 0x70, 0x4c, 0xcf, 0x02, 0x20, 
    0x52, 0x28, 0xab, 0x3d, 0x86, 0x4a, 0x0c, 0x92, 0xdf, 0x0b, 
    0x25, 0x33, 0xe9, 0xf1, 0xfa, 0xd8, 0xb2, 0xa1, 0xc0, 0x1c, 
    0x27, 0xe0, 0xc1, 0x07, 0x50, 0x13, 0xc1, 0x9b, 0x83, 0xc2, 
    0xc5, 0x4d, 0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x02, 0x00, 0x2d, 0x10, 0x00, 0x00, 0x21, 0x00, 
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x20, 0xca, 0xc3, 
    0x5f, 0x4d, 0xcc, 0x5d, 0x13, 0xc4, 0x62, 0x6b, 0xd5, 0x76, 
    0x41, 0xb8, 0x5a, 0xb9, 0xed, 0x4f, 0x13, 0xdd, 0x34, 0x39, 
    0xd1, 0x49, 0x1c, 0x2b, 0x7e, 0xfe, 0x04, 0x31, 0xa8, 0x6a, 
    0x16, 0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x00, 0x56, 0x0f, 0x00, 0x00, 0x4a, 0x00, 0x03, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x4a, 0x04, 0x03, 0x00, 0x46, 0x30, 
    0x44, 0x02, 0x20, 0x01, 0x79, 0x85, 0x91, 0xae, 0x57, 0x70, 
    0xae, 0x73, 0x51, 0x00, 0x58, 0x30, 0x09, 0x14, 0x33, 0x66, 
    0x2d, 0x76, 0x54, 0xf5, 0x74, 0x5f, 0xdb, 0x6c, 0x3b, 0x4b, 
    0xbd, 0x11, 0xa4, 0x7b, 0x6e, 0x02, 0x20, 0x38, 0x47, 0xb4, 
    0x2b, 0x59, 0x3a, 0x1a, 0xa2, 0x0b, 0x1e, 0x77, 0xb6, 0xdf, 
    0x99, 0xe8, 0x96, 0x92, 0x9e, 0xcb, 0xad, 0xb3, 0xdf, 0xda, 
    0xd7, 0xf2, 0x2e, 0xe0, 0x31, 0x13, 0x85, 0xe6, 0x81, 0x14, 
    0xfe, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x00, 0x01, 0x01, 0x16, 0xfe, 0xfd, 0x00, 0x01, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x41, 0xe9, 0x05, 0xe0, 0x33, 0xc3, 
    0x18, 0xff, 0xa0, 0xa9, 0xf6, 0xc5, 0x4f, 0x5d, 0xa4, 0x70, 
    0x41, 0xff, 0x06, 0xae, 0xfd, 0x60, 0xfa, 0x36, 0x6f, 0xdd, 
    0x0d, 0xc5, 0xfe, 0x88, 0xf5, 0xa7, 0x86, 0x8a, 0x1e, 0x76, 
    0xd7, 0xfe, 0x8f, 0xf2 
];

const E: [u8; 39] = [
    0x15, 0xfe, 0xfd, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x00, 0x1a, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x9a, 0x05, 0x08, 0x7d, 0x18, 0xe4, 0x99, 0xf1, 0x1a, 
    0x3a, 0x84, 0xe5, 0x1c, 0x30, 0x0e, 0xb6, 0xf7, 0x0e
];

fn run() -> anyhow::Result<()> {
    let c = SslAcceptor::mozilla_intermediate_v5(SslMethod::dtls())?.build();
    let s = DynSocket {
        raw: vec![&HELLO[..], &SERVER_HELLO[..], &E[..]],
        index: 0
    };
    
    let mut con = c.accept(s)?;
    con.do_handshake()?;
    
    Ok(())
}

fn main() {
    if let Err(e) = run() {
        println!("{:?}", e);
    }
}